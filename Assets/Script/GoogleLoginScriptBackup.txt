using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Threading.Tasks;
using GoogleSigninFirebase;
using Firebase.Extentions;
using Firebase.Auth;
using UnityEngine.UnityEngine;
using Google;
using System.Net.Http;

public class GoogleSingninFirebase : MonoBehaviour
{
    public string GoogleWebAPI="111341694687-mqh3guf8983g1nv2voebo53j7rkh741i.apps.googleusercontent.com";
    private GoogleSignInConfiguration configuration;
    Firebase.DependencyStatus dependencyStatus=Firebase.DependencyStatus.UnavailableOther;
    Firebase.Auth.FirebaseAuth auth;
    Firebase.Auth.FirebaseUser user;
    public Text UsernameTxt,UserEmailTxt;
    public Image UserProfilePic;
    public string imageUrl;
    public GameObject LoginScreen, ProfileScreen;
    
    void Awake()
    {
        configuration=new GoogleSignInConfiguration
        {
            WebClientId=GoogleAPI,
            RequestIdToken=true
        };
    }
    
    // Start is called before the first frame update
    void Start()
    {
        InitFirebase();
    }

    void InitFirebase()
    {
        auth=Firebase.Auth.FirebaseAuth.DefaultInstance
    }

    void GoogleSignInClick()
    {
        GoogleSignIn.Configuration=configuration;
        GoogleSignIn.Configuration.UseGameSignIn=false;
        GoogleSignIn.Configuration.RequestIdToken=true;
        GoogleSignIn.Configuration.RequestEmail=true;

        GoogleSignIn.DefaultInstance.SignIn().ContinueWith(OnGoogleAuthenticatedFinished);
        
    }

    void OnGoogleAuthenticatedFinished(Task<GoogleSignInUser> task)
    {
        if(task.IsFaulted)
        {
            Debug.LogError("Fault_idiot");
        }
        else if(task.IsCanceled)
        {
            Debug.LogError("Dumb Guy, the Login was Canceled");
        }
        else
        {
            Firebase.Auth.Credential credential = Firebase.Auth.GoogleAuthProvider.GetCredential(task.Result.IdToken, null);

            auth.SignInWithCredentialAsync(credential).ContinueWithOnMainThread(task =>
            {
                if (task.IsCanceled) {
                    Debug.LogError("SignInWithCredentialAsync was canceled ,Fool");
                        return;
                                    }
                if (task.IsFaulted) {
                    Debug.LogError("SignInWithCredentialAsync Encountered with an error:" + task.Exception);
                        return;
                                    }

                user=auth.CurrentUser;


             UsernameTxt.text=user.DisplayName;
             UserEmailTxt.text=user.Email;

             LoginScreen.SetActive(false);
             ProfileScreen.SetActive(ture);\

            StartCoroutine(LoadImageUrl(user.PhotoUrl.ToString()))); 

        });


        }
    }

    private string CheckImageUrl(string url)
    {
        if(!string.IsNullOrEmpty(url))
        {
            return url;
        }
        return imageUrl;
    }

    IEnumurator LoadImage(string imageUri)
    {
        WWW www = new WWW(imageUri);
        yield return www;

        UserProfilePic.sprite = Sprite.Create(www.texture, new Rect(0, 0, www.texture.width, www,texture.height), new Vector2(0, 0));
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
